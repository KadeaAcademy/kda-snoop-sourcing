generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FormType {
  CODE
  NOCODE
}

enum FormOrder {
  RANDOM
  SEQUENTIAL
  ABTEST
}

enum Location {
  Goma
  Lubumbashi
  Kinshasa
  Autre
}

enum Formation {
  DEV
  SMD
  AUTRE
}

enum PipelineType {
  WEBHOOK
  AIRTABLE
}

enum PipelineEvent {
  PAGE_SUBMISSION
  FORM_OPENED
}

enum UserRole {
  PUBLIC
  ADMIN
}

model Form {
  id                 String              @id
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  owner              User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId            Int
  formType           FormType            @default(NOCODE)
  answeringOrder     FormOrder           @default(RANDOM)
  name               String              @default("")
  description        String              @default("")
  dueDate            DateTime?
  place              Location            @default(Autre)
  formation          Formation           @default(AUTRE)
  schema             Json                @default("{}")
  submissionSessions SubmissionSession[]
  pipelines          Pipeline[]
  noCodeForm         NoCodeForm?
}

model NoCodeForm {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String   @unique
  blocks      Json     @default("[]")
  blocksDraft Json     @default("[]")
  published   Boolean  @default(false)
  closed      Boolean  @default(false)
}

model Pipeline {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now()) @map(name: "created_at")
  updatedAt DateTime        @updatedAt @map(name: "updated_at")
  name      String
  type      PipelineType
  form      Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  enabled   Boolean         @default(false)
  events    PipelineEvent[]
  data      Json            @default("{}")
}

model SubmissionSession {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now()) @map(name: "created_at")
  updatedAt DateTime       @updatedAt @map(name: "updated_at")
  form      Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  events    SessionEvent[]
}

model SessionEvent {
  id                  String            @id @default(uuid())
  createdAt           DateTime          @default(now()) @map(name: "created_at")
  updatedAt           DateTime          @updatedAt @map(name: "updated_at")
  submissionSession   SubmissionSession @relation(fields: [submissionSessionId], references: [id], onDelete: Cascade)
  submissionSessionId String
  type                String
  data                Json
}

model Address {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  numero    String
  avenue    String
  quartier  String
  commune   String
  ville     String
  User      User[]
}

model User {
  id            Int       @id @default(autoincrement())
  firstname     String?
  lastname      String?
  gender        String
  dateofbirth   String
  address       Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId     String
  phone         String    @unique
  whatsapp      String?
  email         String    @unique
  emailVerified DateTime? @map(name: "email_verified")
  password      String
  role          UserRole  @default(PUBLIC)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  forms         Form[]

  @@map(name: "users")
}
